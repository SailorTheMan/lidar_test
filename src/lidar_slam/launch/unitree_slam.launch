<launch>
    <arg name="wname" default="earth"/>
    <arg name="rname" default="a1"/>
    <arg name="robot_path" value="(find $(arg rname)_description)"/>
    <arg name="dollar" value="$"/>

    <arg name="paused" default="true"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui" default="true"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <!-- Debug mode will hung up the robot, use "true" or "false" to switch it. -->
    <arg name="user_debug" default="false"/>
    
    

   

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find lidar_slam)/worlds/plaza.world"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>

    <!-- Load the URDF into the ROS Parameter Server -->
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(find lidar_slam)urdf/dawg.xacro' 
           DEBUG:=$(arg user_debug)"/>
    
    <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
    <!-- Set trunk and joint positions at startup -->
    <node pkg="gazebo_ros" type="spawn_model" name="urdf_spawner" respawn="false" output="screen"
          args="-urdf -z 0.6 -model $(arg rname)_gazebo -param robot_description -unpause"/> 
    

    <node pkg="point_cloud_converter" type="point_cloud_converter_node" name="point_cloud_converter_node"
          respawn="false" output="screen">
        <remap from="points_in" to="scan"/>
        <remap from="points2_out" to="livox/lidar"/>
    </node>


    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(arg dollar)$(arg robot_path)/config/robot_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node pkg="controller_manager" type="spawner" name="controller_spawner" respawn="false"
          output="screen" ns="/$(arg rname)_gazebo" args="joint_state_controller
          FL_hip_controller FL_thigh_controller FL_calf_controller
          FR_hip_controller FR_thigh_controller FR_calf_controller
          RL_hip_controller RL_thigh_controller RL_calf_controller
          RR_hip_controller RR_thigh_controller RR_calf_controller "/>

    <!-- convert joint states to TF transforms for rviz, etc -->
     <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"
          respawn="false" output="screen">
        <remap from="/joint_states" to="/$(arg rname)_gazebo/joint_states"/>
    </node>

    <!-- load the parameter unitree_controller -->
    <include file="$(find unitree_controller)/launch/set_ctrl.launch">
        <arg name="rname" value="$(arg rname)"/>
    </include>

    <!-- cartographer --> 
    <node name="cartographer_node" pkg="cartographer_ros"
        type="cartographer_node" args="
            -configuration_directory $(find lidar_slam)/config
            -configuration_basename sim.lua"
        output="screen">
        <remap from="points2" to="livox/lidar" />
        <remap from="imu" to="trunk_imu" />
    </node>

    <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros" 
        type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

    <node pkg="unitree_controller" type="unitree_move_teleop" name="unitree_move_teleop" /> 

    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find lidar_slam)/config/lidar.rviz"/> 


    <!-- Convert it into a point cloud -->
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager" />

    <node pkg="nodelet" type="nodelet" name="nodelet1"
            args="load depth_image_proc/point_cloud_xyz nodelet_manager">
        <remap from="camera_info" to="/r200/camera/depth/camera_info"/>
        <remap from="image_rect" to="/r200/camera/depth/image_raw"/>
        <remap from="points" to="/r200/camera/depth/points"/>
    </node>

    
    <!-- <node pkg="unitree_controller" type="unitree_move_kinetic" name="unitree_move_kinetic" />  -->
    <node pkg="unitree_controller" type="unitree_move_teleop" name="unitree_move_teleop" /> 
    <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_twist_keyboard" 
    output="screen" launch-prefix="gnome-terminal --command"/> 

    <node name="playbag" pkg="rosbag" type="record"
      args="-O $(find lidar_slam)/bagfiles/lidar_circle.bag /livox/lidar /a1_gazebo/joint_states /odom /trunk_imu" />

</launch>
